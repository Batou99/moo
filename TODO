# -*- mode: org -*-

** TODO Moo genetic algorithm library, first release [13/13]
  - [X] SBX
  - [X] UNDX
  - [X] premature convergence check (GensNoChange)
  - [X] loop-with-IO
  - [X] elite as SelectionOp
  - [X] fitness scaling as Population a -> Population a
  - [X] SelectionOp combinator
  - [X] preserve elite in crossover and mutation
  - [X] re-organize modules by coding type: binary, real-valued, permutation
  - [X] no-op mutation and crossover
  - [X] time limit
  - [X] rename Fitness to Objective; clean-up minimizing and maximizing selection ops
  - [X] don't require to evalFitness for the initial population
  - [X] NSGA-II
  - [X] reduce boilerplate for the common default scenarios
  - [X] common framework to run GAs in all examples (CLI)
  - [X] constrained selection without penalties
  - [X] death penalty


** API usability
  - [X] withProbability to operate on arbitrary (x -> Rand x), otherwise identity
  - [ ] getConstrainedGenomes(Rs) remove Rs
  - [ ] getConstrainedGenomes adapt for Binary

** TODO Tests [2/3]
  - [X] Continuous problem (Rosenbrock) [4/4]
    - [X] BLX
    - [X] UNDX
    - [X] SBX
    - [X] Gaussian mutation
  - [ ] Some binary problem [0/8]
    - [ ] gray encoding
    - [ ] gray real encoding
    - [ ] binary encoding
    - [ ] point mutation
    - [ ] constant frequency mutation
    - [ ] 1-point crossover
    - [ ] 2-point crossover
    - [ ] uniform crossover
  - [X] Stop conditions [4/5]
    - [X] # of generations
    - [X] GensNoChange
    - [X] fitness condition
    - [X] Or
    - [ ] And
    - [ ] time limit
  - [ ] Loop constructs [/]
    - [ ] loop
    - [ ] loopWithLog
    - [ ] loopIO


** TODO: future releases [4/6]
  - [ ] permutation GAs, TSP example
  - [X] minimizing SelectionOp's
  - [ ] time-dependent mutation
